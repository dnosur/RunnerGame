using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Unity.VisualScripting;
using UnityEditor.Experimental.GraphView;
using UnityEngine;

[System.Serializable]
public class PlayerController : MonoBehaviour
{
    [Header("Character Controller")]
    [SerializeField] CharacterController characterController;

    [Header("Animation Controller")]
    [SerializeField] PlayerAnimationController playerAnimationController;

    [Header("Screen Controllers")]
    [SerializeField] DeathController deathController;
    [SerializeField] MenuController menuController;

    [Header("Speed")]
    [SerializeField] float speed = 5f;
    [SerializeField] Vector3 dir;
    [SerializeField] bool isStop = false;
    [SerializeField] private float speedIncreaseAmount = 0.10f;
    [SerializeField] private float speedIncreaseInterval = 2f;
    [SerializeField] private float maxSpeed = 20f;

    [Header("Characteristics")]
    [SerializeField] int gravity = -20;
    [SerializeField] int slideTime = 1000;

    [Header("Skins")]
    [SerializeField] int selectedCharacterIndex = 0;
    [SerializeField] GameObject[] skins;

    //?????????, ?? ????????? ??????? ?? ????? ????? ????? ????????? ??????.
    //????? ??? ????, ???? ?????????? ????????? ??????????, ?? ??????? ????? ?????????? ?? ????? ??? ?????????? ??????
    //? ????????? ????????????? ???? ??????? ???? ????? ???? ????????? ?????? ??? ?????????? ?? ?????? ????????????, ??? ?? ?????? ?????? ??????? ????????? ?????????????? ? ??????
    [SerializeField] float groundDistance = .16f; 

                     int health = 100;

    [Header("Score")]
    [SerializeField] float scorePoint = 0.1f;
                     int score;
    [SerializeField] int coins = 1000;


    [Header("Sounds")]
    [SerializeField] AudioClip bgMusic;
    [SerializeField] AudioClip coinMusic;
    [SerializeField] AudioClip deathMusic;

    //???????? ??????, ?? ??????? ????? ?????. 
    //????? ???? ????? ?? ????? ?? ??????? ????????? ?????
    string roadName;

    //????????? ???????? ??????, ??? ????? ????? - 1, ?????? - 2, ? ??
    int inputCode;

    //????????? ?? ??, ?????????? ?? ????? ? ????????? ?????????? ???????? 
    bool isSliding;

    //??? ?????????? ?????? ?????? ?? ???????????? ??????
    ParkourController.Orientation parkourSlideOrientation; //???????, ? ??????? ????? ?????????

    //???????. ??????? ????????? ??????, ??????? ????? ??????? ? ???????.
    //? ????? ?????? ??????? ????? ???? ????????? ? ???? ????? Play ?????? ParkourController
    delegate void ParkourSlideHandler(); 
    ParkourSlideHandler parkourSlideHandler; //?????????? ????????, ? ??????? ? ?????????? ???????? ????? Play()

    CapsuleCollider coll;

    // Start is called before the first frame update
    void Start()
    {
        ChangePlayerSkin();
        roadName = "";

        if (isStop) Stop();

        inputCode = 0;
        StartCoroutine(IncreaseSpeedRoutine());
        dir = new Vector3(0, 0, speed);

        // ??? ?????,?? ????? ?????? ????-??
        AudioManager.instance.PlayBackgroundMusic(bgMusic);
        coll = GetComponent<CapsuleCollider>();
    }

    // Update is called once per frame
    void FixedUpdate()
    {

        if (isStop) return;

        //???? ????????? ?? y > 0, ??? ??????????, ??? ?? ????? ????????? ??????
        //??? ?? ?? ????????? ?? ?????
        //?????? ????? ?????? ? ?????.
        if (dir.y > 0 || !characterController.isGrounded)
        {
            dir.y += gravity * Time.fixedDeltaTime;
        }
        else
        { //???? ?? ????? ?? ?????, ? ?? ??????? - ????????? ?? y = 0.
            dir.y = 0;
        }

        //??????????? ??????.
        //????? Move ?? ?????????? ?????? ?? ???????? ???????, ? ???? ????????? ? ???????? ???????.
        characterController.Move(Time.fixedDeltaTime * dir);
        score += Convert.ToInt32(speed * scorePoint); //???????????? ???? ??????

        //???? ????? ????????????? ?????
        if (inputCode == 1)
        {
            //?????????? ?????? ?????
            Vector3 newPos = transform.position;
            newPos.x -= 2;

            transform.position = newPos;
        }

        //???? ??????
        if(inputCode == 2)
        { //??????????
            Vector3 newPos = transform.position;
            newPos.x += 2;

            transform.position = newPos;
        }

        //???? ????? ?????
        if(inputCode == 3)
        {
            Debug.Log("Up");
            playerAnimationController.Jump();
            dir.y = 10; //??????? ????????? ?? y ?? 10
            coll.center = new Vector3(0, 1, 0); //?????????? ?????????? ???????? ??????????
            coll.height = 2;
            isSliding = false;
        }

        //?????????? ? ????????? ?????????
        inputCode = 0;

        //???? ????? ?? ?????
        if (characterController.isGrounded)
        {
            gravity = -20; //????????????? ??????? ??????????
        }

        //???? ????? ?? ? ????????? ?????????? - ??????????? ??? ? ?????????? ????????
        if (!isSliding)
        {
            coll.center = new Vector3(0, 1, 0); //?????????? ?????????? ???????? ??????????
            coll.height = 2;
        }
    }

    //???????? ?? ??????? ????? ?? ???????????? ???????, ??? ??? ??????????? ????, ??? fixedUpdate
    private void Update()
    {

        if (isStop) return;

        //Forward Down Debug
        //????????. ??????? ??????? ??????? ????? ???????.
        //????????? ? ????? ?????? ????????????? ?????? ???????????? ?????? ? ????????

        //?????? ?????????? ?????? ?????
        Vector3 start = transform.position;
        start.y += 2.2f;
        start.z += 0.61f;

        RaycastHit[] rhit = Physics.RaycastAll(start, transform.TransformDirection(Vector3.down), 2.2f);

        //???? ?? ???-?? ??????
        if (rhit.Length != 0)
        {
            //???????????? ??? ? ?????????? ????????? ???????
            Debug.DrawRay(start, transform.TransformDirection(Vector3.down * rhit[0].distance), Color.yellow);
        }


        //??? ??? ????????? ??????, ?? ??????? ????? ?????
        RaycastHit[] hits = Physics.RaycastAll(transform.position, transform.TransformDirection(Vector3.down));
        GameObject road = null;

        foreach (RaycastHit hit in hits)
        {
            //???? ?????? ?? ??????
            if (hit.collider.tag == "RoadComponent")
            {
                //????????????? ?????? road, ? ???? ???????? ??????
                road = hit.collider.gameObject;
                roadName = road.transform.parent.name;
                break; //??????? ?? ?????
            }
        }

        //?? ?????? ???? ????? ? ????? - ????? ?????? ?? ??????????? 
        if (!road) return;

        //???? ? ?????????? ???????? ???? ????? Play
        if(parkourSlideHandler != null)
        {
            //????????? ?????????? ?? ????? ?? ??????? ??? ?????
            if(SwipeController.swipeLeft && ParkourSlide(ParkourController.Orientation.Left)) { return; }
            if (SwipeController.swipeRight && ParkourSlide(ParkourController.Orientation.Right)) { return; }
            if (SwipeController.swipeUp && ParkourSlide(ParkourController.Orientation.Top)) { return; }
            if (SwipeController.swipeDown && ParkourSlide(ParkourController.Orientation.Bottom)) { return; }
        }

        //????? ?????
        if (SwipeController.swipeLeft && transform.position.x > -2)
        {
            //????????? ?? ??????????? ??????????? ?????? ?????.
            //???? ?? ????? ??????????? ????????, ??????? ?????? ???????????? ??????, ? ??
            if (CheckHorizontalMove(ref hits, true)) inputCode = 1;
            else SideKick();
        }

        //??????
        if (SwipeController.swipeRight && transform.position.x < 2)
        {
            if (CheckHorizontalMove(ref hits, false)) inputCode = 2;
            else SideKick();
        }

        //?????
        if (SwipeController.swipeUp && (bool)(dir.y == 0 || characterController.isGrounded || GetGroundDistance() <= groundDistance))
        {
            Debug.Log(3);
            inputCode = 3;
        }
        else if(SwipeController.swipeUp)
        {
            Debug.Log("Grounded distance " + GetGroundDistance());
            Debug.Log("Up false");
        }

        //????
        if (SwipeController.swipeDown && !isSliding)
        {
            gravity = -80; //??????????? ?????? ? ?????
            coll.center = new Vector3(0, 0.5f, 0);
            coll.height = 1;
            playerAnimationController.Slide();
            //????????? ?????? ?????.
            Task.Run(() =>
            {
                isSliding = true;

                //?????, ??????? ? slideTime, ????? ????? ? ????????? ??????????
                Thread.Sleep(slideTime);

                isSliding = false;
            });
        }

    }

    //???????? ?? ???????????? ?????? ? ?????????
    private void OnCollisionEnter(Collision collision)
    {
        //???? ??????????? ? ????????????? 
        if (collision.gameObject.tag == "Obstruction")
        {
            Vector3 start;

            //???? ????? ? ??????????
            if (isSliding)
            {
                RaycastHit hit;

                start = transform.position;
                start.y += 0.5f;

                //???? ????? ??????? ? ???????????
                if (Physics.Raycast(start, transform.TransformDirection(Vector3.right), out hit, 1f) && hit.collider.tag == "Obstruction")
                {
                    //????????????? ????
                    Debug.DrawRay(start, transform.TransformDirection(Vector3.right * hit.distance), Color.red);
                    Debug.Log("Slide hit!");
                    Die();
                }

                //??????? ?? ??????
                return;
            }

            //???????? ??? ????? ???????
            start = transform.position;
            start.y += 2.2f;
            start.z += 0.61f;

            //?????? - ????
            RaycastHit[] rhit = Physics.RaycastAll(start, transform.TransformDirection(Vector3.down), 2.2f);
            
            if(rhit.Length > 0) Debug.DrawRay(start, transform.TransformDirection(Vector3.down * rhit[0].distance), Color.red);

            //???? ????? ??????? ??????????? - ?????? ?? ???????? ? ???????????
            if (rhit.Length != 0 && rhit.LastOrDefault(obj => obj.collider.tag == "Obstruction").collider != null)
            { //????????????? ????
                if (rhit[0].distance >= 1.7f)
                {
                    LegKick();
                    Debug.Log("Kick! " + rhit[0].distance);
                }
                else
                {
                    Debug.Log("Hit! " + rhit[0].distance);
                    Die();
                }

                Debug.DrawRay(start, transform.TransformDirection(Vector3.down * rhit[0].distance), Color.red);
            }
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.tag == "Coin")
        {
            coins += 1;
            Destroy(other.gameObject);
            AudioManager.instance.PlayRandomPitch(coinMusic);
            return;
        }

        if(other.tag == "Parkour")
        {
            parkourSlideHandler = other.GetComponent<ParkourController>().Play;
            parkourSlideOrientation = other.GetComponent<ParkourController>().GetOrientation();
        }
    }

    //Getters & Setters

    public string GetRoadName() { return roadName; }

    public int GetScore() { return score; }

    public int GetPlayerIndex() { return selectedCharacterIndex; }

    public int GetCoins() { return coins; }

    public void SetPlayerIndex(int newIndex) { selectedCharacterIndex = newIndex; }

    public void SpendCoins (int amount){ coins -= amount; }


    public float GetGroundDistance()
    {
        RaycastHit[] hits = Physics.RaycastAll(transform.position, transform.TransformDirection(Vector3.down));
        RaycastHit roadHit = hits.LastOrDefault(obj => obj.collider.tag == "RoadComponent");

        Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.down) * roadHit.distance, Color.magenta);

        return roadHit.distance;
    }

    public ref CharacterController GetCharacterController() { return ref characterController; }

    //Functions

    private bool CheckHorizontalMove(ref RaycastHit[] hits, bool side)
    {
        Vector3 bodyPos = transform.position;
        bodyPos.y += 3f;

        if (side) bodyPos.x -= 2;
        else bodyPos.x += 2;

        //???????? ?????? - ???? ? ????? ??? ?????? ??????? ?????? (? ??????????? ?? ??????)
        hits = Physics.RaycastAll(bodyPos, transform.TransformDirection(Vector3.down), 3f);

        if (hits.Length != 0) Debug.DrawRay(bodyPos, transform.TransformDirection(Vector3.down * hits.Last().distance), Color.red);

        //???? ????? ?? ?????? ?????? ??????, ???? ?????? ?????? (??? ?? ????? ???? ? ??????, ??-?? ??????????? ?? ?????)
        //?????? ????????????? ? ??????? ??????? ?????
        if (hits.Length == 0) return true;
        if (hits.Length >= 1 && hits[0].collider.tag == "Obstruction" && hits[0].distance >= 1.7f) return true;
        if (hits.Length == 1 && hits[0].collider.tag == "RoadComponent") return true;

        return false;
    }

    public void Stop()
    {
        speedIncreaseAmount = 0;

        isStop = true;

        playerAnimationController.Idle();
    }

    public void Run()
    {
        Debug.Log("Run pos " + transform.position);

        isStop = false;

        playerAnimationController.Run();

        speedIncreaseAmount = .01f;

        Debug.Log("Run then " + transform.position);
    }

    private void Die()
    {
        speed = 5;
        speedIncreaseAmount = 0;

        score = 0;

        isStop = true;

        playerAnimationController.Die();
        deathController.ShowDeathScreen();

        AudioManager.instance.PlaySound(deathMusic);
    }

    private void SideKick()
    {
        if (health == 100)
        {
            StartCoroutine(Freeze(1));
        }
        else { Die(); }
    }

    private void LegKick()
    {
        dir.y = 5;

        if (health == 100) { StartCoroutine(Freeze(speed / 2)); }
        else Die();
    }

    private bool ParkourSlide(ParkourController.Orientation orientation)
    {
        //???? ????????? ? ?????? ???????, ? ?????????? ???????? ?? ??????
        if(orientation == parkourSlideOrientation && parkourSlideHandler != null) 
        {
            //???????? ????? ?? ??????????
            //? ??????? ??????????
            parkourSlideHandler();
            parkourSlideHandler = null;
            return true; //?????????, ??? ???? ??? ???????? ??????
        }
        return false;
    }

    public void ChangePlayerSkin()
    {
        skins[selectedCharacterIndex].SetActive(true);
        playerAnimationController.UpdateAnimator();

        for  (int i = 0; i < skins.Length; i++)
        {
            if( i != selectedCharacterIndex ) skins[i].SetActive(false);
        }
    }

    //Coroutines

    private IEnumerator IncreaseSpeedRoutine()
    {
        while (true)
        {
            yield return new WaitForSeconds(speedIncreaseInterval);

            if (speed < maxSpeed)
            {
                speed += speedIncreaseAmount;
                dir.z = speed;
                if (speed > maxSpeed)
                {
                    speed = maxSpeed;
                }
            }
            else
            {
                break;
            }
        }
    }

    private IEnumerator Freeze(float speed)
    {
        float speedTemp = this.speed;

        this.speed = speed;
        dir.z = speed;

        health = 50;

        yield return new WaitForSeconds(2);

        health = 100;
        this.speed = speedTemp;
        dir.z = this.speed;
    }
}
